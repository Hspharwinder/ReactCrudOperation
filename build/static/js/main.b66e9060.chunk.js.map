{"version":3,"sources":["Services/ApiService.js","functionComponentValidation/formValidation.js","Component/AddUser.jsx","Component/Authentication/login.jsx","Component/Authentication/register.jsx","Component/GetUser.jsx","Component/EditUser.jsx","Routing/routes.jsx","App.js","serviceWorker.js","index.js"],"names":["GetUser","axios","get","AddUser","user","post","deleteUser","id","url","delete","EditUser","put","validateEmail","values","errors","test","validateText","validateCheckBoxList","arr","valid","forEach","key","checked","props","changeHandler","e","eventValues","setEventValues","Validation","onCheckBoxSelected","target","value","designationList","map","Name","checkBoxSelected","onBlur","submitHandler","preventDefault","ApiService","state","then","msg","console","log","data","res","history","push","catch","err","getName","setState","name","type","index","validate","v_id","touched","v_msg","dept","isSubmitValid","submitValidation","email","designation","password","bindDeptList","Id","selectedItem","dropDownSelectedValue","this","deptList","depId","deptName","selectedIndex","isValid","Object","v_name","v_dept","v_email","v_password","v_designation","className","to","onSubmit","scope","onChange","change","bind","disabled","Component","Login","showRegisterModal","onRegisterShow","onLoginClose","showLogin","onClick","onClose","htmlFor","href","Register","showLoginModal","onLoginShow","userName","onRegisterClose","showRegister","getUser","result","localStorage","setItem","JSON","stringify","error","addUserHandler","src","width","height","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label","placeholder","length","_id","editUserHandler","deleteHandler","editUser","filePath","match","params","locValue","parse","getItem","filter","x","Router","path","exact","component","render","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b66e9060.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// class component\r\nclass ApiService {\r\n    GetUser = () => {\r\n        return axios.get(`http://localhost:3000/get`)\r\n    }\r\n    AddUser = (user) => {\r\n        return axios.post(`http://localhost:3000/post`, user);\r\n    }\r\n    deleteUser = (id) => {\r\n        let url = `http://localhost:3000/delete/` + id;\r\n        return axios.delete(`${url}`);\r\n    }\r\n    EditUser = (user) => {\r\n        return axios.put(`http://localhost:3000/put`, user);\r\n    }\r\n}\r\n\r\nexport default new ApiService();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function component\r\n// const GetUser = () => {\r\n//     return axios.get(`http://localhost:3000/get`)\r\n// }\r\n\r\n// export default GetUser; ","export const validateEmail = (values) => {\r\n    let errors = '';\r\n    if (!values) {\r\n        errors = 'Email address is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values)) {\r\n        errors = 'Email address is invalid';\r\n    }\r\n    return errors;\r\n};\r\n \r\nexport const validateText = (values) => {\r\n    let errors = '';\r\n    if (!values) {\r\n        errors = 'required';\r\n    } \r\n    return errors;\r\n};\r\n\r\nexport const validateCheckBoxList = (arr) =>{\r\n    let valid = false;\r\n    let errors = '';\r\n    // set valid true if any checkbox checked\r\n    arr.forEach((key) => {\r\n        if (key.checked)\r\n            valid = true;\r\n    });\r\n    // if valid is false, it mean no checkbox selected so return validation error\r\n    if(!valid)\r\n        errors = 'required';\r\n    \r\n    return errors;\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ApiService from '../Services/ApiService';\r\nimport { validateEmail, validateText, validateCheckBoxList} from '../functionComponentValidation/formValidation';\r\n\r\nclass AddUser extends Component{\r\n    constructor(props){\r\n        super(props)     \r\n        this.state = {\r\n            name:'',\r\n            dept:'',\r\n            email:'',\r\n            designation:[],\r\n            password:'',\r\n        }\r\n        this.bindDeptList();\r\n        this.designationList = [\r\n            { Id: '1', Name: 'DR' },\r\n            { Id: '2', Name: 'Manager' },\r\n            { Id: '3', Name: 'Asst. Manager' },\r\n            { Id: '4', Name: 'TL' },\r\n            { Id: '5', Name: 'Trainee' },\r\n        ]\r\n        this.isSubmitValid = false;\r\n        this.selectedItem = [];\r\n        this.checkBoxSelected = [];\r\n        this.validate = {  };\r\n        this.dropDownSelectedValue = ''\r\n    }   \r\n\r\n    bindDeptList(){\r\n        this.deptList = [\r\n            { depId: '1', deptName: 'MEAN' },\r\n            { depId: '2', deptName: 'MERN' },\r\n            { depId: '3', deptName: 'MEVN' },\r\n            { depId: '4', deptName: 'DOT NET' },\r\n            { depId: '5', deptName: 'PHP' },\r\n        ]\r\n    }\r\n    \r\n    changeHandler = (e) =>{        \r\n        const eventValues = this.setEventValues(e);       \r\n        this.Validation(eventValues);   \r\n    } \r\n\r\n    setEventValues(e){\r\n        return {\r\n            id: e.target.id,\r\n            value: e.target.value,\r\n            type: e.target.type,\r\n            index: e.target.selectedIndex,\r\n        }\r\n    }\r\n\r\n    // dropdown(department) change \r\n    change(e){\r\n        const checked = e.target.value;\r\n        const eventValues = this.setEventValues(e);\r\n        if (eventValues.index !== 0) {\r\n            // this.setState({ value: event.target.value });\r\n            // setstate not asynchronous therefore use like this \r\n            this.setState({ dept: checked }, function () {\r\n                console.log(\"worked \", this.state.dept);\r\n                this.dropDownSelectedValue = checked;\r\n                // check validation\r\n                this.Validation(eventValues);\r\n\r\n                let arr = this.deptList;\r\n                //here you will see the current selected value of the select input\r\n                arr = arr.map((key) => {\r\n                    key.checked = key.deptName === checked ? true : false;\r\n                    return key;\r\n                })\r\n                this.selectedItem = arr;\r\n            });\r\n        }\r\n        else{\r\n            // check validation\r\n            // this.setState({ dept: '' });\r\n            this.Validation(eventValues);            \r\n        }           \r\n    }\r\n\r\n    onCheckBoxSelected = e => {\r\n        const checked = e.target.value;\r\n\r\n        let arr = this.designationList;\r\n        //here you will see the current selected value of the select input\r\n        arr = arr.map((key) => {\r\n            if(key.Name === checked && key.checked){\r\n                key.checked = false;\r\n            }\r\n            else if(key.Name === checked){\r\n                key.checked = true;\r\n            }\r\n            else if(key.checked)   \r\n                key.checked = true;\r\n            else \r\n                key.checked = false;\r\n            return key;\r\n        })\r\n        this.checkBoxSelected = arr;        \r\n        //call for validation\r\n        const eventValues = this.setEventValues(e);\r\n        // check validation\r\n        this.Validation(eventValues);\r\n    }\r\n\r\n    onBlur = (e) => {\r\n        const eventValues = this.setEventValues(e);\r\n        // check validation\r\n        this.Validation(eventValues); \r\n    }\r\n\r\n    submitHandler = e=> {\r\n        e.preventDefault(); // prevent to page refresh otherwise it reset empty state values    \r\n            \r\n        ApiService.AddUser(this.state).then(msg => {\r\n            console.log(\"Response : \", msg.data.res);\r\n            this.props.history.push('/getUser');\r\n\r\n        }).catch(err=>{\r\n            console.log(\"err \", err)\r\n        })\r\n    }\r\n    \r\n    getName = (value, id) => {\r\n        this.setState({ [id] : value }) // dynamic value [id], static id\r\n        console.log(\"Child to parent  \", value, id);\r\n        console.log(\"Child to parent state :: \", this.state.name);\r\n    }\r\n\r\n    Validation = (e) => {  \r\n        const id = e.id;\r\n        const value = e.value;\r\n        const type = e.type;\r\n        const index = e.index;\r\n        console.log(\"e = \", e);\r\n        this.setState({ [id]: value });\r\n        //  creating dynamic object for validation\r\n        let valid = this.validate;\r\n        let v_id = \"v_\" + id;\r\n        valid[v_id] = { touched : true}; // insert new key and value into dynamic object \r\n        // valid[v_id].touched = true;   // also set value like this\r\n        switch(true){\r\n            case id === 'email' || type === \"email\": {\r\n                valid[v_id] = { v_msg: validateEmail(value) }\r\n                // valid[v_id].v_msg = validateEmail(value);  // also set value like this\r\n                break;\r\n            }\r\n            case id === \"phone\" || type === \"phone\": {\r\n                valid[v_id].v_msg = validateText(value);\r\n                break;\r\n            }\r\n            // case id === \"name\" || type === \"text\": {\r\n            //     valid[id].v_msg = validateText(value);\r\n            //     break;\r\n            // }\r\n\r\n            // case id === \"password\" || type === \"password\": {\r\n            //     valid.v_msg = validateText(value);\r\n            //     break;\r\n            // }\r\n            case id === \"matchPassword\" || type === \"matchPassword\" : {\r\n                valid[v_id].v_msg = validateText(value);\r\n                break;\r\n            }\r\n            case index === 0: {\r\n                valid[v_id].v_msg = index === 0 ? 'required' : '';\r\n                this.setState({dept:''});  // issue not setting value of dept \r\n                break;    \r\n            }\r\n            case id === \"designation\" || type === 'checkbox': {\r\n                valid[v_id].v_msg = validateCheckBoxList(this.checkBoxSelected);\r\n                break;\r\n            }\r\n            // required validation\r\n            case type === \"text\" : {\r\n                valid[v_id].v_msg = validateText(value);\r\n                break;\r\n            }            \r\n            default : {\r\n                break;\r\n            }            \r\n        }    \r\n        this.isSubmitValid = this.submitValidation();\r\n        console.log(\"IsSubmit \", this.isSubmitValid);\r\n    }  \r\n\r\n    submitValidation(){\r\n        let isValid = true;\r\n        console.log(\"this.state \", this.state);\r\n        Object.values(this.state).forEach((value)=> {\r\n            console.log(\"submit button \", value);\r\n            if(!value)\r\n                isValid = false; console.log(\"IsValid \", isValid);\r\n       });\r\n        if ('required' === validateCheckBoxList(this.checkBoxSelected))\r\n            isValid = false;\r\n\r\n        return isValid;\r\n    }\r\n\r\n    render(){\r\n        const { name, email, password } = this.state;  \r\n        const { v_name, v_dept, v_email, v_password, v_designation } = this.validate;\r\n        return (\r\n            <div className=\"container mt-5 border\">                \r\n                <h1><u>Add User Page</u></h1>\r\n                <h3><Link to=\"/getUser\">Go to home</Link></h3>\r\n\r\n                <form onSubmit={this.submitHandler}>\r\n                    <table className=\"table\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Department</th>\r\n                                <th scope=\"col\">Email</th>\r\n                                <th scope=\"col\">Password</th>                                \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">\r\n                                    <input type=\"text\" className=\"form-control\"  \r\n                                        value={name} onChange={this.changeHandler} id=\"name\" \r\n                                        onBlur={this.onBlur}\r\n                                    />    \r\n                                    {(v_name && v_name.touched && v_name.v_msg) ? (<p className=\"text-danger\">{v_name.v_msg}</p>) : ''}                         \r\n                                </th>\r\n                                <td>\r\n                                    <select id=\"dept\" className=\"form-control\"  name=\"dept\" onChange={this.change.bind(this)} >\r\n                                        <option value=\"select\">select</option>\r\n                                        {this.deptList.map((e, key) => {\r\n                                            return <option key={key} value={e.Name}>{e.deptName}</option>;\r\n                                        })}\r\n                                    </select>\r\n                                    {/* <input type=\"text\" className=\"form-control\" value={dept} \r\n                                        onChange={this.changeHandler} onBlur={this.onBlur} id=\"dept\" \r\n                                    /> */}\r\n                                    {v_dept && v_dept.v_msg ? (<p className=\"text-danger\">{v_dept.v_msg}</p>) : ''}  \r\n                                                                         \r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" className=\"form-control\" value={email} \r\n                                        onChange={this.changeHandler} id=\"email\" \r\n                                        onBlur={this.onBlur}\r\n                                    />\r\n                                    {v_email ? (<p className=\"text-danger\">{v_email.v_msg}</p>):''}      \r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" className=\"form-control\" value={password} \r\n                                        onChange={this.changeHandler} id=\"password\" onBlur={this.onBlur}\r\n                                    />\r\n                                    {(v_password && v_password.touched && v_password.v_msg) ? (<p className=\"text-danger\">{v_password.v_msg}</p>) : ''}  \r\n                                </td>\r\n                               \r\n                            </tr>\r\n                            <tr className=\"thead-dark\">\r\n                                <th scope=\"col\">Designation</th>\r\n                                <th scope=\"col\">Gender</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    {this.designationList.map((e, key) => {\r\n                                        return <span key={key}> <input type=\"checkbox\" value={e.Name} className=\"col-3\" \r\n                                            onChange={this.onCheckBoxSelected} id=\"designation\"\r\n                                        /> {e.Name} </span>;\r\n                                    })}\r\n\r\n                                    {/* <input type=\"text\" className=\"form-control\" value={designation}\r\n                                        onChange={this.changeHandler} id=\"designation\" onBlur={this.onBlur}\r\n                                    /> */}\r\n                                    {(v_designation  && v_designation.v_msg) ? (<p className=\"text-danger\">{v_designation.v_msg}</p>) : ''}\r\n                                </td>\r\n                                <td className=\"radio\">\r\n                                    <input type=\"radio\" className=\"col-6\" value=\"male\" name=\"optradio\" />Male\r\n                                    <input type=\"radio\" className=\"col-6\" value=\"female\" name=\"optradio\" />Female\r\n                                </td>\r\n                            </tr>                       \r\n                        </tbody>\r\n                    </table>   \r\n                    <button type=\"submit\" disabled={!this.isSubmitValid} className=\"btn btn-primary float-right mb-5\">Submit</button>\r\n                </form>                                           \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddUser","import React, { Component } from 'react';\r\nimport '../Authentication/login.css';\r\n\r\nclass Login extends Component {\r\n    onClose(e){               \r\n        this.props.onLoginClose();\r\n    }\r\n    showRegisterModal = (e) => {\r\n        this.props.onRegisterShow();\r\n    }   \r\n    render() {\r\n        let showLogin = this.props.showLogin;\r\n        if (!showLogin) {\r\n            return null;\r\n        }        \r\n        return (    \r\n            <div className=\"bglogin1\">\r\n                <div className=\"login\">\r\n                    <span onClick={e => { this.onClose(e); }} className=\"close\">&times;</span>\r\n                    <h2>Login </h2>                   \r\n                    {/* <button onClick={e => { this.onClose(e); }} >\r\n                        Close\r\n                    </button> */}\r\n                    <form >\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"username\">Username</label>\r\n                            <input \r\n                                type=\"text\" className=\"form-control\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-primary\">\r\n                                {/* <span className=\"spinner-border spinner-border-sm mr-1\"></span> */}\r\n                                Login\r\n                            </button >    \r\n                            <a href=\"/#\" className=\"nav-item nav-link\" onClick={e => { this.showRegisterModal(); }}>Register</a>  \r\n                        </div>                    \r\n                       \r\n                    </form>                    \r\n                </div>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Login;\r\n\r\n// https://react-bootstrap.github.io/components/modal/","import React, { Component } from 'react';\r\nimport '../Authentication/login.css';\r\n\r\nclass Register extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            userName: '',\r\n            password: ''\r\n        }\r\n    }\r\n    onClose(e) {\r\n        this.props.onRegisterClose();\r\n    }\r\n    showLoginModal = (e) => {\r\n        this.props.onLoginShow();\r\n    } \r\n    changeHandler = (e) =>{\r\n        this.setEventValues(e)\r\n    }\r\n    render() {\r\n        let showRegister = this.props.showRegister;\r\n        if (!showRegister) {\r\n            return null;\r\n        }\r\n        const { userName, password } = this.state;\r\n        return (\r\n            <div className=\"bglogin1\">\r\n                <div className=\"login\">\r\n                    <span onClick={e => { this.onClose(e); }} className=\"close\">&times;</span>\r\n                    <h2>Register </h2>\r\n                    <form >\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"username\">Username</label>\r\n                            <input \r\n                                type=\"text\" className=\"form-control\" \r\n                                value={userName} \r\n                                onChange={this.changeHandler} id=\"userName\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" value={password} />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-primary\">\r\n                                Register \r\n                            </button >                        \r\n                            <a href=\"/#\" className=\"nav-item nav-link\" onClick={e => { this.showLoginModal(); }}>Login</a> \r\n                        </div >\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Register;\r\n\r\n// https://react-bootstrap.github.io/components/modal/","import React, { Component } from 'react';\r\nimport ApiService from '../Services/ApiService';\r\nimport { Link } from 'react-router-dom';\r\nimport Login from '../Component/Authentication/login';\r\nimport Register from '../Component/Authentication/register';\r\n\r\nclass getUser extends Component{\r\n    // constructor(props)\r\n    constructor() { \r\n        super() //  super(props)\r\n        this.state = {\r\n            user:[],\r\n            err:'',\r\n            showLogin: false,\r\n            showRegister: false\r\n        }       \r\n    }\r\n    // it execute once when component Mount in react life cycle after page rendering\r\n    componentDidMount(){\r\n        this.getUser();\r\n    }\r\n    getUser = () => {\r\n        ApiService.GetUser().then(result => {  \r\n            this.setState({ user: result.data });    \r\n            // set value into local storage so that use again in edit user\r\n            localStorage.setItem('AllUser', JSON.stringify(this.state.user));\r\n            console.log(\"result \", result);  \r\n        }).catch(error => {\r\n            console.log(error);\r\n            this.setState({err: 'Error reterving data :: ' + error})\r\n        });\r\n    } \r\n    addUserHandler = () => {\r\n        this.props.history.push('/addUser');\r\n    }\r\n    deleteHandler(id){\r\n        ApiService.deleteUser(id).then(result => {\r\n            console.log(result);\r\n            this.getUser()\r\n        }).catch(error => {\r\n            console.log(error);\r\n            this.setState({ err: 'Error reterving data :: ' + error })\r\n        });\r\n    }    \r\n    editUserHandler(id){\r\n        this.props.history.push('/editUser/' + id);\r\n    }\r\n    showLoginModal = e => {     \r\n        this.setState({\r\n            showLogin: !this.state.showLogin\r\n        }); \r\n        this.setState({ showRegister: false });\r\n    }\r\n    showRegisterModal = (e) => {\r\n        this.setState({ showRegister: !this.state.showRegister });\r\n        this.setState({\r\n            showLogin: false\r\n        }); \r\n    }\r\n    render(){\r\n        const { user, err } = this.state;\r\n        return (\r\n            <div className=\"container mt-5 border\">  \r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <img src=\"https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"></img>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                        <div className=\"navbar-nav\">\r\n                            <Link className=\"nav-item nav-link active\" to=\"/getUser\">Home</Link> <span className=\"sr-only\">(current)</span>\r\n                            <Link className=\"nav-item nav-link\" to=\"/addUser\">Add User</Link>                           \r\n                            <a  href=\"/#\" className=\"nav-item nav-link\" onClick={e => { this.showLoginModal(); }}>Login</a>\r\n                            <Login onLoginClose={this.showLoginModal} showLogin={this.state.showLogin} onRegisterShow={this.showRegisterModal} />\r\n                            <Register onRegisterClose={this.showRegisterModal} showRegister={this.state.showRegister} onLoginShow={this.showLoginModal} />\r\n                            {/* <Link className=\"nav-item nav-link\" to=\"/login\" >Login</Link>  */}\r\n                            <Link className=\"nav-item nav-link\" to=\"/getUser\"></Link>\r\n                        </div>\r\n                    </div>\r\n                    <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </nav>\r\n\r\n                { \r\n                    // ternary operator ->  err ? <span></span> : <div></div> \r\n                    err ? <span>{err} </span> : \r\n                    <div>\r\n                        {/* <button className=\"btn btn-primary\" onClick={this.addUserHandler}>Add User</button><br /> */}\r\n                        <table className=\"table\">\r\n                            <thead className=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\">Department</th>\r\n                                    <th scope=\"col\">Email</th>\r\n                                    <th scope=\"col\">Password</th>\r\n                                    <th scope=\"col\">Designation</th>   \r\n                                    <th scope=\"col\">Button</th>                         \r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    // ternary operator user.length ? user.map(...) : null\r\n                                    user.length ? \r\n                                    user.map(data =>\r\n                                        <tr key={data._id}>\r\n                                            <th scope=\"row\">{data.name}</th>\r\n                                            <td>{data.dept}</td>\r\n                                            <td>{data.email}</td>\r\n                                            <td>{data.password}</td>\r\n                                            <td>{data.designation}</td>\r\n                                            <td>\r\n                                                <button className=\"btn btn-primary  mr-1\" onClick={() => this.editUserHandler(data._id)}>Edit</button>\r\n                                                <button className=\"btn btn-danger\" onClick={() => this.deleteHandler(data._id)}>Delete</button>\r\n                                            </td>\r\n                                        </tr>   \r\n                                    ):null\r\n                                }                          \r\n                            </tbody>\r\n                        </table>  \r\n                    </div>     \r\n                }          \r\n            </div>            \r\n        )\r\n    }\r\n}\r\nexport default getUser;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ApiService from '../Services/ApiService';\r\n\r\n\r\nclass editUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user:[{\r\n                name: '',\r\n                dept: '',\r\n                email: '',\r\n                password:'',\r\n                designation: ''\r\n            }]       \r\n        }\r\n        // alert(this.props.match.params.id);\r\n    }\r\n\r\n    // it execute once when component Mount in react life cycle after page rendering\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n    changeHandler = e => {\r\n        let key = e.target.id; \r\n        let value = e.target.value;\r\n        let arr = this.state.user[0];\r\n        arr[key] = value; // for static --> arr.email       \r\n        arr.filePath = ''; \r\n        this.setState(arr)\r\n    }\r\n\r\n    getUser = () => {    \r\n        const id = this.props.match.params.id;\r\n        let locValue = JSON.parse(localStorage.getItem('AllUser'));   \r\n        locValue = locValue.filter(x => x._id === id);\r\n        this.setState({ user: locValue });\r\n        console.log(\"this.setState  \", this.setState.user );\r\n    } \r\n\r\n    submitHandler = e => {\r\n        e.preventDefault(); // prevent to page refresh otherwise it reset empty state values\r\n        ApiService.EditUser(this.state.user[0]).then(msg => {\r\n            console.log(\"Response : \", msg.data.res);\r\n            this.props.history.push('/getUser');\r\n        }).catch(err => {\r\n            console.log(\"err \", err)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { name, dept, email, password, designation } = this.state.user[0];\r\n        return (\r\n            <div className=\"container mt-5 border\">\r\n                <h1><u>Edit User Page</u></h1>\r\n                <h3><Link to=\"/getUser\">Go to home</Link></h3>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <table className=\"table\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Department</th>\r\n                                <th scope=\"col\">Email</th>\r\n                                <th scope=\"col\">Password</th>\r\n                                <th scope=\"col\">Designation</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\"><input type=\"text\" className=\"form-control\" value={name} onChange={this.changeHandler} id=\"name\" /></th>\r\n                                <td><input type=\"text\" className=\"form-control\" value={dept} onChange={this.changeHandler} id=\"dept\" /></td>\r\n                                <td><input type=\"text\" className=\"form-control\" value={email} onChange={this.changeHandler} id=\"email\" /></td>\r\n                                <td><input type=\"text\" className=\"form-control\" value={password} onChange={this.changeHandler} id=\"password\" /></td>\r\n                                <td><input type=\"text\" className=\"form-control\" value={designation} onChange={this.changeHandler} id=\"designation\" /></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <button type=\"submit\" className=\"btn btn-primary float-right mb-5\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default editUser","import React from 'react';\r\nimport {BrowserRouter as BRouter,  Route, Switch} from 'react-router-dom';\r\nimport AddUser from '../Component/AddUser';\r\nimport getUser from '../Component/GetUser';\r\nimport editUser from '../Component/EditUser';\r\n\r\nconst Router = () =>{\r\n    return (\r\n        <div>\r\n            <BRouter> \r\n                <Switch>\r\n                    <Route path=\"/\" exact component={getUser} ></Route>\r\n                        <Route path=\"/getUser\" exact component={getUser} ></Route>\r\n                        <Route path=\"/addUser\" exact component={AddUser} ></Route>\r\n                        <Route path=\"/editUser/:id\" component={editUser} ></Route>\r\n                        <Route path=\"/\" render={() => <div>Error : 404, Page Not Found</div>} ></Route>\r\n                </Switch>                \r\n            </BRouter>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Router from './Routing/routes';\n\nfunction App() {\n  return (\n    <div>\n      <Router></Router>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}